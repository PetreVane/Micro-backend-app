version: '3.2'

networks:
  private:
    driver: bridge

services:
  configuration-server:
    build:
      context: config-service/
    environment:
      - spring.cloud.config.uri=http://configuration-server:8012/
      - logging.logstash.url=logstash:5000
    ports:
      - '8012:8012'
    networks:
      - private

  mysql-service:
    build:
      context: mysql/
    environment:
      - MYSQL_ROOT_PASSWORD=root
    ports:
      - '3306:3306'
    networks:
      - private

  rabbitmq:
    build:
      context: rabbit-mq/
    ports:
      - '15691:15691'
      - '15692:15692'
      - '15671:15671'
      - '5671:5671'
      - '15672:15672'
      - '25672:25672'
      - '5672:5672'
      - '4369:4369'
    networks:
      - private

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx1g -Xms1g"
      ELASTIC_PASSWORD: changeme
          # Use single node discovery in order to disable production mode and avoid bootstrap checks.
          # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - private

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    networks:
      - private
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - private
    depends_on:
      - elasticsearch

  gateway-service:
    build:
      context: gateway-service/
    environment:
      - spring.cloud.config.uri=http://configuration-server:8012/
      - spring.profiles.active=production
    restart: on-failure
    ports:
      - '8080:8080'
    networks:
      - private
    depends_on:
      - configuration-server


  discovery-service:
    build:
      context: discovery-service/
    environment:
      - spring.cloud.config.uri=http://configuration-server:8012/
      - spring.profiles.active=production
    ports:
      - '8010:8010'
    networks:
      - private
    depends_on:
      - configuration-server


  users-service:
    build:
      context: users-service/
    environment:
      - spring.cloud.config.uri=http://configuration-server:8012/
      - spring.profiles.active=production
      - spring.datasource.url=jdbc:mysql://mysql-service:3306/users?serverTimezone=UTC
    ports:
      - '8070:8070'
    networks:
      - private
    depends_on:
      - configuration-server
      - mysql-service


  file-uploader-service:
    build:
      context: file-uploader-service/
    environment:
      - spring.cloud.config.uri=http://configuration-server:8012/
      - spring.profiles.active=production
    ports:
      - '8060:8060'
    networks:
      - private
    depends_on:
      - configuration-server


volumes:
  elasticsearch:
